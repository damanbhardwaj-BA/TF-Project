name: Terraform Template

description: "A composite action to deploy Terraform for different environments."

inputs:
  environment:
    description: "The environment to deploy (dev, test, prod)"
    required: true
  aws_role:
    description: 'AWS Role to assume to perform Terraform plan'
    required: true  
  terraform_version:
    description: "Terraform version"
    required: true
  tf_working_dir:
    description: "Terraform working directory"
    required: true
  backend_config:
    description: "Path to backend config"
    required: true
  backend_key:
    description: "Terraform state backend key"
    required: true
  tfvars_config:
    description: "Path to tfvars file"
    required: true
  run_terraform_test:
    description: "Whether to run Terraform tests"
    required: true
  tf_session_duration:
    description: 'The duration of the assumed role session'
    default: '3600'
    required: false
  snyk_token:
    description: "Snyk token"
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-1
        role-to-assume: ${{ inputs.aws_role }}
        role-session-name: TerraformApplyJob
        role-duration-seconds: ${{ inputs.tf_session_duration }}

    - name: "setup-terraform"
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: "Terraform Init"
      id: init
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      run: |
        terraform init  -input=false \
        -backend-config="region=${{ inputs.region }}" \
        -backend-config="bucket=ccoe-ecp-cicd-${{ inputs.account_id }}-${{ inputs.region }}-tfstate" \
        -backend-config="dynamodb_table=ccoe-ecp-cicd-${{ inputs.account_id }}-${{ inputs.region }}-tfstate"
   
    # Runs a Plan for the configuration. It runs only for pull requests
    - name: "Terraform Plan"
      id: plan
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      run: terraform plan  -var-file=tfvars/${{ inputs.environment }}.tfvars -no-color -input=false
      if: github.event_name == 'pull_request'
  
    # Highlights when a terraform plan fails
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      
    # Applies the configuration. It runs only when a commit is pushed to main
    - name: "Terraform Apply"
      id: apply
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -var-file=tfvars/${{ inputs.environment }}.tfvars -auto-approve -input=false